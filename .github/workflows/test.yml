name: 编译vnt-cli

on:
  workflow_dispatch:
    inputs:
      repo:
        description: '请输入vnt源码仓库'
        required: true
        default: 'cn1095/vnt'
      branch:
        description: '请输入仓库的分支或版本号，默认main分支'
        required: true
        default: '1.2.16'
      upx:
        description: '编译完成后是否使用upx压缩vnt-cli以减少二进制体积'
        required: true
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always
  TZ: Asia/Shanghai
  branch: "${{ github.event.inputs.branch }}"
  repo: "${{ github.event.inputs.repo }}"
jobs:
 build:
    name: build ${{ matrix.TARGET }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - TARGET: aarch64-unknown-linux-musl
            OS: ubuntu-latest
            FEATURES: ring-cipher,openssl-vendored,wss
            STRIP: aarch64-linux-musl-strip
          - TARGET: armv7-unknown-linux-musleabihf
            OS: ubuntu-latest
            FEATURES: ring-cipher,openssl-vendored,wss
            STRIP: armv7l-linux-musleabihf-strip
          - TARGET: armv7-unknown-linux-musleabi
            OS: ubuntu-latest
            FEATURES: ring-cipher,openssl-vendored,wss
            STRIP: armv7m-linux-musleabi-strip
          - TARGET: arm-unknown-linux-musleabihf
            OS: ubuntu-latest
            FEATURES: ring-cipher,openssl-vendored
            STRIP: arm-linux-musleabihf-strip
          - TARGET: arm-unknown-linux-musleabi
            OS: ubuntu-latest
            FEATURES: ring-cipher,openssl-vendored,wss
            STRIP: arm-linux-musleabi-strip
          - TARGET: mipsel-unknown-linux-musl
            OS: ubuntu-latest
            FEATURES: openssl-vendored,ring-cipher,wss
            STRIP: mipsel-linux-musl-strip
          - TARGET: mips-unknown-linux-musl
            OS: ubuntu-latest
            FEATURES: ring-cipher,openssl-vendored,wss
            STRIP: mips-linux-musl-strip
          - TARGET: i686-unknown-linux-musl
            OS: ubuntu-latest
            FEATURES: ring-cipher,openssl-vendored,wss
            STRIP: i686-linux-musl-strip
          - TARGET: x86_64-unknown-linux-musl
            OS: ubuntu-latest
            FEATURES: ring-cipher,openssl-vendored,wss
            STRIP: x86_64-linux-musl-strip
    runs-on: ${{ matrix.OS }}
    env:
      NAME: vnt-cli_${{ matrix.TARGET }}
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
      STRIP: ${{ matrix.STRIP }}
      FEATURES: ${{ matrix.FEATURES }}
    steps:
      - name: 安装 UPX
        if: github.event.inputs.upx == 'true'
        uses: crazy-max/ghaction-upx@v3
        with:
          version: latest
          install-only: true
      - name: 设置编译环境
        run: |
            case $TARGET in 
              mipsel-unknown-linux-musl)
                MUSL_URI=mipsel-linux-musl-cross
                ;;
              aarch64-unknown-linux-musl)
                MUSL_URI=aarch64-linux-musl-cross
                ;;
              armv7-unknown-linux-musleabihf)
                MUSL_URI=armv7l-linux-musleabihf-cross
                ;;
              armv7-unknown-linux-musleabi)
                MUSL_URI=armv7m-linux-musleabi-cross
                ;;
              arm-unknown-linux-musleabihf)
                MUSL_URI=arm-linux-musleabihf-cross
                ;;
              arm-unknown-linux-musleabi)
                MUSL_URI=arm-linux-musleabi-cross
                ;;
              mips-unknown-linux-musl)
                MUSL_URI=mips-linux-musl-cross
                ;;
              i686-unknown-linux-musl)
                MUSL_URI=i686-linux-musl-cross
                ;;
              x86_64-unknown-linux-musl)
                MUSL_URI=x86_64-linux-musl-cross
                ;;
            esac
              echo "MUSL_URI=${MUSL_URI}" >> $GITHUB_ENV
              mkdir -p /opt/musl_gcc 
              wget -q -c https://musl.cc/$MUSL_URI.tgz -P /opt/musl_gcc/
              tar zxf /opt/musl_gcc/$MUSL_URI.tgz -C /opt/musl_gcc/
              sudo ln -s /opt/musl_gcc/$MUSL_URI/bin/*gcc /usr/bin/
              sudo apt-get update && sudo apt-get install clang llvm libc6-dev-i386 crossbuild-essential-arm64 crossbuild-essential-armhf musl-tools libboost-all-dev libc6-dev -y
            if [[ $TARGET == mips-unknown-linux-musl ]] || [[ $TARGET == mipsel-unknown-linux-musl ]] ; then
            rustup install 1.72.1
            rustup default 1.72.1
            fi
            sudo timedatectl set-timezone "Asia/Shanghai"
            cat >>~/.cargo/config <<EOF
            [target.i686-unknown-linux-musl]
            linker = "i686-linux-musl-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.x86_64-unknown-linux-musl]
            linker = "x86_64-linux-musl-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.aarch64-unknown-linux-musl]
            linker = "aarch64-linux-musl-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.armv7-unknown-linux-musleabihf]
            linker = "armv7l-linux-musleabihf-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.armv7-unknown-linux-musleabi]
            linker = "armv7m-linux-musleabi-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.arm-unknown-linux-musleabihf]
            linker = "arm-linux-musleabihf-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.arm-unknown-linux-musleabi]
            linker = "arm-linux-musleabi-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.mipsel-unknown-linux-musl]
            linker = "mipsel-linux-musl-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
            [target.mips-unknown-linux-musl]
            linker = "mips-linux-musl-gcc"
            rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]  
            EOF
      - name: 添加编译平台
        run: rustup target add $TARGET
      - name: 开始编译
        run: |
          git clone -b ${{ env.branch }} https://github.com/${{ env.repo }} /opt/vnt
          cd /opt/vnt
          cargo build --package vn-link-cli --release --target $TARGET --features ${{ matrix.FEATURES }}
          cargo build --package vnt-cli --release --target $TARGET -features ${{ matrix.FEATURES }}
          mkdir -p /opt/bin
          mv /opt/vnt/target/${TARGET}/release/vnt-cli /opt/bin/vnt-cli
          mv /opt/vnt/target/${TARGET}/release/vn-link-cli /opt/bin/vn-link-cli
      - name: 打包压缩
        if: github.event.inputs.upx == 'true'
        run: |
          cd /opt/bin
          ls -alh vnt-cli vn-link-cli
          upx --lzma --best vnt-cli vn-link-cli
          ls -alh vnt-cli vn-link-cli
      - name: 上传
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.NAME }}
          path: /opt/bin/*
